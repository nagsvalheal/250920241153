/**
 * @description  Service class used to handle the creation and update of tasks 
 *               related to video uploads. This class also triggers methods 
 *               for sending SMS and email notifications.
 * History
 * Version    Author        Date        Detail        Description
 * 1.0        Niyas        24-07-2024        Created        Refactored Version
 */
public without sharing class BI_PSPB_QuestionTaskService {
/**
 * @description  Retrieves and updates tasks based on the given criteria 
 *               from the provided enrollee record ID to assessment names 
 *               map.
 * @param enrolleeRecIdToAssessmentNamesMap The ID of the record related to the treatment reminders.
 * @return A list of BI_PSPB_Treatment_Reminder__c objects that match the criteria.
 */
public static List<Task> getTasksToUpdate(
	Map<Id, Map<String, String>> enrolleeRecIdToAssessmentNamesMap
) {
	List<Task> tasksToUpdate = new List<Task>();
	try {
		// Extract keys from the map to create a List<Id>
		List<Id> assessmentIdList = new List<Id>(
			enrolleeRecIdToAssessmentNamesMap.keySet()
		);
		List<Task> taskRecords = queryTasks(assessmentIdList);
		for (Task taskToUpdate : taskRecords) {
			if (
				shouldUpdateTask(
					taskToUpdate,
					enrolleeRecIdToAssessmentNamesMap
				)
			) {
				taskToUpdate.Status = BI_PSPB_NotificationConstant.notificationStatusComplete;
				tasksToUpdate.add(taskToUpdate);
			}
		}
	} catch (Exception ex) {
		BI_PSP_LogMessagesUtility.exceptionLogMessage(
			ex.getMessage(),
			BI_PSPB_QuestionTaskService.class.getName(),
			ex
		);
	}
	return tasksToUpdate;
}

/**
 * @description  Queries tasks from the database based on the given list of 
 *               assessment IDs.
 * @param assessmentIdList The ID of the record related to the treatment reminders.
 * @return A list of BI_PSPB_Treatment_Reminder__c objects that match the criteria.
 */
private static List<Task> queryTasks(List<Id> assessmentIdList) {
	// Convert List<Id> to a comma-separated string for the query
	String conditionIds =
		'(\'' +
		String.join(assessmentIdList, '\', \'') +
		'\')';
	String fields = 'Id, Status, BI_PSP_Category__c, WhatId';
	String conditions =
		'WhatId IN ' +
		conditionIds +
		' ' +
		'AND Status = \'' +
		BI_PSPB_NotificationConstant.taskStatusAction +
		'\' ' +
		'AND (BI_PSP_Category__c = \'' +
		BI_PSPB_NotificationConstant.pss +
		'\' ' +
		'OR BI_PSP_Category__c = \'' +
		BI_PSPB_NotificationConstant.wpai +
		'\' ' +
		'OR BI_PSP_Category__c = \'' +
		BI_PSPB_NotificationConstant.dlqi +
		'\' ' +
		'OR BI_PSP_Category__c = \'' +
		BI_PSPB_NotificationConstant.actionTypeQuestionnaires +
		'\' ' +
		'OR BI_PSP_Category__c = \'' +
		BI_PSPB_NotificationConstant.qsq +
		'\')';

	// Execute query and return results as List<Task>
	List<SObject> results = BI_PSP_CommonQueryUtility.executeQuery(
		'Task',
		fields,
		conditions,
		false
	);
	return (List<Task>) results; // Cast results to List<Task>
}

/**
 * @description  Determines whether a given task should be updated based on 
 *               its category and the related assessment names.
 * @param taskToUpdate The ID of the record related to the treatment reminders.
 * @param enrolleeRecIdToAssessmentNamesMap The ID of the record related to the treatment reminders.
 * @return A list of BI_PSPB_Treatment_Reminder__c objects that match the criteria.
 */
private static Boolean shouldUpdateTask(
	Task taskToUpdate,
	Map<Id, Map<String, String>> enrolleeRecIdToAssessmentNamesMap
) {
	Map<String, String> assessmentNames = enrolleeRecIdToAssessmentNamesMap.get(
		taskToUpdate.WhatId
	);
	return (taskToUpdate.BI_PSP_Category__c ==
		BI_PSPB_NotificationConstant.dlqi &&
		assessmentNames.containsKey(
			BI_PSPB_NotificationConstant.dlqiQuestionName
		)) ||
		(taskToUpdate.BI_PSP_Category__c ==
		BI_PSPB_NotificationConstant.pss &&
		assessmentNames.containsKey(
			BI_PSPB_NotificationConstant.pssQuestionName
		)) ||
		(taskToUpdate.BI_PSP_Category__c ==
		BI_PSPB_NotificationConstant.wpai &&
		assessmentNames.containsKey(
			BI_PSPB_NotificationConstant.wpaiQuestionName
		)) ||
		(taskToUpdate.BI_PSP_Category__c ==
		BI_PSPB_NotificationConstant.qsq &&
		assessmentNames.containsKey(
			BI_PSPB_NotificationConstant.qsqQuestionName
		)) ||
		(taskToUpdate.BI_PSP_Category__c ==
		BI_PSPB_NotificationConstant.actionTypeQuestionnaires &&
		assessmentNames.containsKey(
			BI_PSPB_NotificationConstant.questionnaireRecordName
		));
}
}